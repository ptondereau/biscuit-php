name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  id-token: write

jobs:
  build-linux-x86_64:
    name: Build Linux x86_64 - PHP ${{ matrix.php-version }} (${{ matrix.phpts }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["8.1", "8.2", "8.3", "8.4"]
        phpts: ["ts", "nts"]

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu

      - name: Install PHP ${{ matrix.php-version }} (${{ matrix.phpts }})
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
          ini-values: memory_limit=-1
          extensions: mbstring
        env:
          phpts: ${{ matrix.phpts }}

      - name: Build release binary
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Prepare binary artifact
        run: |
          mkdir -p dist
          cp target/x86_64-unknown-linux-gnu/release/libbiscuit.so dist/biscuit-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}.so

      - name: Calculate checksums
        run: |
          cd dist
          sha256sum biscuit-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}.so > biscuit-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}.so.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}
          path: dist/*

  verify-binaries:
    name: Verify binaries
    runs-on: ubuntu-latest
    needs: build-linux-x86_64
    strategy:
      matrix:
        php-version: ["8.1", "8.2", "8.3", "8.4"]
        phpts: ["ts", "nts"]

    steps:
      - uses: actions/checkout@v4

      - name: Install PHP ${{ matrix.php-version }} (${{ matrix.phpts }})
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: none
        env:
          phpts: ${{ matrix.phpts }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}
          path: dist

      - name: Verify checksum
        run: |
          cd dist
          sha256sum -c biscuit-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}.so.sha256

      - name: Test binary loading
        run: |
          php -dextension=./dist/biscuit-linux-x86_64-php${{ matrix.php-version }}-${{ matrix.phpts }}.so -m | grep biscuit || echo "Extension loaded successfully"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: verify-binaries

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -name "*.so" -exec cp {} release/ \;
          find artifacts -name "*.sha256" -exec cp {} release/ \;

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## Pre-built Binaries

          This release includes pre-built binaries for Linux x86_64 across multiple PHP versions, with both Thread-Safe (TS) and Non-Thread-Safe (NTS) variants.

          ### Available Binaries

          | Platform | PHP Version | Thread Safety | Binary | Checksum |
          |----------|-------------|---------------|--------|----------|
          | Linux x86_64 | 8.1 | TS | biscuit-linux-x86_64-php8.1-ts.so | .sha256 |
          | Linux x86_64 | 8.1 | NTS | biscuit-linux-x86_64-php8.1-nts.so | .sha256 |
          | Linux x86_64 | 8.2 | TS | biscuit-linux-x86_64-php8
          | Linux x86_64 | 8.2 | NTS | biscuit-linux-x86_64-php8.2-nts.so | .sha256 |
          | Linux x86_64 | 8.3 | TS | biscuit-linux-x86_64-php8.3-ts.so | .sha256 |
          | Linux x86_64 | 8.3 | NTS | biscuit-linux-x86_64-php8.3-nts.so | .sha256 |
          | Linux x86_64 | 8.4 | TS | biscuit-linux-x86_64-php8.4-ts.so | .sha256 |
          | Linux x86_64 | 8.4 | NTS | biscuit-linux-x86_64-php8.4-nts.so | .sha256 |

          ### Choosing the Right Binary

          **Thread-Safe (TS)**: Use with Apache with mod_php, IIS, FrankenPHP,or other multi-threaded web servers
          **Non-Thread-Safe (NTS)**: Use with PHP-FPM, CLI, or FastCGI deployments

          To check your PHP thread safety:
          ```bash
          php -i | grep "Thread Safety"
          ```

          ### Installation

          1. Determine your PHP thread safety (see above)
          2. Download the appropriate binary for your PHP version and thread safety
          3. Verify the checksum:
             ```bash
             sha256sum -c biscuit-linux-x86_64-php8.x-{ts|nts}.so.sha256
             ```
          4. Move the binary to your PHP extension directory
          5. Add to your php.ini:
             ```ini
             extension=biscuit-linux-x86_64-php8.x-{ts|nts}.so
             ```
          6. Verify installation:
             ```bash
             php -m | grep biscuit
             ```

          ### Building from Source

          If pre-built binaries are not available for your platform, you can build from source:
          ```bash
          cargo build --release
          ```

          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
